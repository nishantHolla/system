# setting

set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already

set drawbox
set incsearch
set scrolloff 10
set wrapscroll
set period 1
map Z set hidden!
set rulerfmt "  %a|  %p|  \033[7;31m %m \033[0m|  \033[7;33m %c \033[0m|  \033[7;35m %s \033[0m|  \033[7;34m %f \033[0m|  %i/%t"
set dircounts
set info size:time

# move to sibling directory

map J :updir; down; open
map K :updir; up; open

# colors and icons

set icons

# image preview

set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# remove

cmd remove ${{
	echo "Trash following files?"
	echo " "
	echo "$fx"
	echo "y/n :"
	read confirm
	if [[ "$confirm" == "y" ]] ; then
		echo "$fx" | while IFS= read -r line ; do rm -rf "$line"; done
	fi
}}

map Dt remove


# trash

cmd trash ${{
	echo "Trash following files?"
	echo " "
	echo "$fx"
	echo "y/n :"
	read confirm
	if [[ "$confirm" == "y" ]] ; then
		echo "$fx" | while IFS= read -r line ; do trash-put "$line"; done
	fi
}}

map Dx trash

# open

cmd open ${{
	filename=$(basename -- "$fx")
	extension="${filename##*.}"

	case $extension in
		jpg|jpeg|png|webp|gif) APP="$IMAGE_VIEWER";;
		mp4|mpg) APP="$VIDEO_VIEWER";;
		pdf) APP="$PDF_VIEWER";;
		*) lf -remote "send $id \$$EDITOR \"$fx\""; exit 0;;
	esac

	lf -remote "send $id \$$APP \"$fx\" > /dev/null 2> /dev/null &"

	# case $(file --mime-type -Lb $f) in
	# 	text/*|application/javascript|inode/x-empty|application/json) lf -remote "send $id \$$EDITOR "$fx"";;
	# 	 *) for f in $fx; do xdg-open "$f" > /dev/null 2> /dev/null & done;;
	# esac
}}

cmd open-with-gui &$@ "$fx"
cmd open-with-cli $$@ "$fx"
map O push :open-with-gui<space>
map o push :open-with-cli<space>

# execute

map x "$fx"

# duplicate file

cmd duplicateFile ${{
	cp $fx "${fx}_copy"
}}

map Y duplicateFile

# paste

cmd paste %{{
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	case "$mode" in
	copy) cp -r --backup=numbered -- "$@" .;;
	move) mv --backup=numbered -- "$@" .;;
	esac
	rm ~/.local/share/lf/files
	lf -remote "send clear"
}}

# extract

cmd extract ${{
	set -f
	echo "Extract to: "
	read target
	7z x $fx -o"$target"
}}
map e extract

# wallpaper

cmd setWallpaper ${{
	set -f
	awesome-client "AwesomeWM.theme.replaceWallpaper(nil, '$fx')"
}}

map W setWallpaper

# archive

cmd archive ${{
	set -f
	mkdir $1
	cp -r $fx $1

	echo -en "Archive using:\n1)tar\n2)zip\n"
	read selection
	if [[ $selection == "1" ]] ; then
		tar czf $1.tar.gz $1
		rm -rf $1
	elif [[ $selection == "2" ]] ; then
		zip -r $1.zip $1
		rm -rf $1
	fi
	lf -remote "send unselect"

}}
map a push :archive<space>

# new

cmd new ${{

	if [[ "$1" == */*\.* ]] ; then
		p="$(dirname "$1")"
		f="$(basename "$1")"
		mkdir -p "$p"
		touch "$1"
	elif [[ "$1" == */* ]] ; then
		mkdir -p "$1"
	else
		touch "$1"
	fi

	lf -remote "send select $1"

}}

map n push :new<space>

# rename

cmd rename ${{
    vimv $(basename -a -- $fx)

    lf -remote "send $id load"
    lf -remote "send $id unselect"
}}

map r rename

# select

map f
map f<space> :toggle
map fa :glob-select *
map fA :glob-unselect *
map ff push :glob-select<space>**<left>
map fb invert-below

map <space>

# follow symlinks

cmd follow_link %{{
	lf -remote "send ${id} select '$(readlink $f)'"
}}

map gL follow_link

# fzf: file and directory navigation

cmd fzf ${{
	if [[ $1 == "ripgrep" ]]
	then
		RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
		res="$(
				fzf --bind "$FZF_KEYBINDINGS" --bind "change:reload:$RG_PREFIX {q} || true" \
				--ansi --layout=reverse --header 'Search in files' \
				| cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
			  )"
		[ -n "$res" ] && lf -remote "send $id select \"$res\""
		return

	elif [[ $1 == "fasd" ]]
	then

		if [ -z ${2+x} ]
		then
			res="$(fasd -l | grep -iv cache | fzf --bind $FZF_KEYBINDINGS 2>/dev/tty)"
		elif [[ $2 == "dir" ]]
		then
			res="$(fasd -ld | grep -iv cache | fzf --bind $FZF_KEYBINDINGS 2>/dev/tty)"
		elif [[ $2 == "file" ]]
		then
			res="$(fasd -lf | grep -iv cache | fzf --bind $FZF_KEYBINDINGS 2>/dev/tty)"
		fi

		if [ -n "$res" ]; then
			if [ -d "$res" ]; then
				cmd="cd"
			else
				cmd="select"
			fi
			res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
			lf -remote "send $id $cmd \"$res\""
		fi

	elif [[ $1 == "fd" ]]
	then
		if [ -z ${2+x} ]
		then
			selection="$(fd -H . $HOME | fzf --bind $FZF_KEYBINDINGS)"

		elif [[ $2 == "dir" ]]
		then
			selection="$(fd -H -t d . $HOME | fzf --bind $FZF_KEYBINDINGS)"

		elif [[ $2 == "file" ]]
		then
			selection="$(fd -H -t f . $HOME | fzf --bind $FZF_KEYBINDINGS)"
		fi

		if [ -z ${selection+x} ]
		then
			return
		elif [[ -d "$selection" ]] ; then
			lf -remote "send $id cd $selection"
		else
			lf -remote "send $id select $selection"
		fi
	fi

}}

map gr fzf ripgrep

map gfo fzf fasd
map gfd fzf fasd dir
map gff fzf fasd file

map goo fzf fd
map god fzf fd dir
map gof fzf fd file

# yank paths

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank-basename-without-extension ${{
	echo "$fx" |
	xargs -r -d '\n' basename -a |
	awk -e '{
	for (i=length($0); i > 0; i--) {
	  if (substr($0, i, 1) == ".") {
	    if (i == 1) print $0
	    else print substr($0, 0, i-1)

	    break
	  }
	}

	if (i == 0)
	  print $0
	}' |
	if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
	xclip -i -selection clipboard
}}

map c
map cd yank-dirname
map cp yank-path
map cb yank-basename

# quit

cmd quit ${{
	~/.config/lf/cleaner
	lf --remote "send $id quit"
}}

map q quit
map <esc> &{{
	lf --remote "send $id clear"
	lf --remote "send $id unselect"

}}

# remove spaces
cmd removeSpaces ${{
	removeSpaces .
}}

map b removeSpaces

# preview

cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

map zp toggle_preview

# edit file

map <a-l> &{{
	lf -remote "send $id \$$EDITOR "$fx""
}}

# dragon drop

cmd dragonDrop ${{
	dragon-drop $fx
}}

map <a-d> dragonDrop
