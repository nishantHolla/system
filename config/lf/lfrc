# setting

set drawbox
set incsearch
set scrolloff 10
set wrapscroll
set period 1
map Z set hidden!
set ruler 'acc:progress:selection:filter:ind'
set dircounts

# move to sibling directory

map J :updir; down; open
map K :updir; up; open

# colors and icons

set icons

# image preview

set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

# remove
cmd remove ${{
	echo "Trash following files?"
	echo " "
	echo "$fx"
	echo "y/n :"
	read confirm
	if [[ "$confirm" == "y" ]] ; then
		echo "$fx" | while IFS= read -r line ; do rm -rf "$line"; done
	fi
}}

map Dx remove


# trash
cmd trash ${{
	echo "Trash following files?"
	echo " "
	echo "$fx"
	echo "y/n :"
	read confirm
	if [[ "$confirm" == "y" ]] ; then
		echo "$fx" | while IFS= read -r line ; do trash-put "$line"; done
	fi
}}

map Dt trash

# open
cmd open &{{
	case $(file --mime-type -Lb $f) in
		text/*) lf -remote "send $id \$$EDITOR \"\$fx\"";;
		inode/x-empty) lf -remote "send $id \$$EDITOR \"\$fx\"";;
		     *) for f in $fx; do $OPENER "$f" > /dev/null 2> /dev/null & done;;
	esac
}}

cmd open-with-gui &$@ $fx
cmd open-with-cli $$@ $fx
map O push :open-with-gui<space>
map o push :open-with-cli<space>

# execute

map x $$f
map X !$f

# duplicate file

cmd duplicateFile ${{
	cp $fx "${fx}_copy"
}}

map Y duplicateFile

# paste

cmd paste %{{
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	case "$mode" in
	copy) cp -r --backup=numbered -- "$@" .;;
	move) mv --backup=numbered -- "$@" .;;
	esac
	rm ~/.local/share/lf/files
	lf -remote "send clear"
}}

# extract

cmd extract ${{
	set -f
	echo "Extract to: "
	read target
	case $f in
		*.tar.bz|*.tar.bz2|*.tbz|*.tbz2)
			mkdir $target && tar xjvf $f -C $target;;
		*.tar.gz|*.tgz)
			mkdir $target && tar xzvf $f -C $target;;
		*.tar.xz|*.txz)
			mkdir $target && tar xJvf $f -C $target;;
		*.7z|*.zip)
			7z x $f -o"$target";;
	esac
}}
map e extract

# wallpaper

cmd setWallpaper ${{
	set -f
	awesome-client "AwesomeWM.theme.replaceWallpaper(nil, '$fx')"
}}

map W setWallpaper

# archive

cmd archive ${{
	set -f
	mkdir $1
	cp -r $fx $1

	echo -en "Archive using:\n1)tar\n2)zip\n"
	read selection
	if [[ $selection == "1" ]] ; then
		tar czf $1.tar.gz $1
		rm -rf $1
	elif [[ $selection == "2" ]] ; then
		zip -r $1.zip $1
		rm -rf $1
	fi
	lf -remote "send unselect"

}}
map a push :archive<space>

# new

cmd new ${{

	isDir=$(echo "$1" | grep -c "/")

	if [[ "$isDir" == "0" ]] ; then
		touch "$1"
	else
		mkdir -p "$1"
	fi

}}

map n push :new<space>

# rename

cmd rename ${{
    vimv $(basename -a -- $fx)

    lf -remote "send $id load"
    lf -remote "send $id unselect"
}}

map r rename

# select

map f
map f<space> :toggle
map fa :glob-select *
map fA :glob-unselect *
map ff push :glob-select<space>**<left>

map <space>

# follow symlinks

cmd follow_link %{{
	lf -remote "send ${id} select '$(readlink $f)'"
}}

map gL follow_link

# fzf

cmd fzf ${{
	selection="$(fd -H . $HOME | neoFzf)"

	if [[ -d "$selection" ]] ; then
		lf -remote "send $id cd $selection"
	else
		lf -remote "send $id select $selection"
	fi

}}

map <c-f> fzf

# yank paths

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank-basename-without-extension ${{
	echo "$fx" |
	xargs -r -d '\n' basename -a |
	awk -e '{
	for (i=length($0); i > 0; i--) {
	  if (substr($0, i, 1) == ".") {
	    if (i == 1) print $0
	    else print substr($0, 0, i-1)

	    break
	  }
	}

	if (i == 0)
	  print $0
	}' |
	if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
	xclip -i -selection clipboard
}}

map c
map cd yank-dirname
map cp yank-path
map cb yank-basename

# quit

cmd quit ${{
	~/.config/lf/cleaner
	lf --remote "send $id quit"
}}

map q quit
map <esc> &{{
	lf --remote "send $id clear"
	lf --remote "send $id unselect"

}}

# remove spaces
cmd removeSpaces ${{
	removeSpaces .
}}

map b removeSpaces
